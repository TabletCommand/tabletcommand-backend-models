"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
require("mocha");
const _ = require("lodash");
const m = require("../index");
const config = require("./config");
const mock_1 = require("./mock");
describe("ManagedIncident", function () {
    let models, mongoose;
    let testItem;
    beforeEach(async function () {
        const c = await m.connect(config.url);
        models = c.models;
        mongoose = c.mongoose;
        const mock = (0, mock_1.default)({
            mongoose
        });
        testItem = mock.managedIncident;
    });
    afterEach(async function () {
        await mongoose.disconnect();
    });
    it("is saved", async function () {
        const item = new models.ManagedIncident(testItem);
        const sut = await item.save();
        chai_1.assert.isNotNull(testItem._id);
        chai_1.assert.equal(sut.departmentId, testItem.departmentId);
        chai_1.assert.equal(sut.CallerNumber, testItem.CallerNumber);
        chai_1.assert.equal(sut.CommandChannel, testItem.CommandChannel);
        chai_1.assert.equal(sut.TacticalAltChannel, testItem.TacticalAltChannel);
        chai_1.assert.equal(sut.TacticalChannel, testItem.TacticalChannel);
        chai_1.assert.equal(sut.active, testItem.active);
        chai_1.assert.equal(sut.address, testItem.address);
        chai_1.assert.equal(sut.api_incident_number, testItem.api_incident_number);
        chai_1.assert.equal(sut.channel, testItem.channel);
        chai_1.assert.equal(sut.channel_owner, testItem.channel_owner);
        chai_1.assert.equal(sut.end_time, testItem.end_time);
        chai_1.assert.equal(sut.end_unix_time, testItem.end_unix_time);
        chai_1.assert.equal(sut.is_closed, testItem.is_closed);
        chai_1.assert.equal(sut.location, testItem.location);
        chai_1.assert.equal(sut.managed, testItem.managed);
        chai_1.assert.equal(sut.modified_date, testItem.modified_date);
        chai_1.assert.equal(sut.modified_unix_date, testItem.modified_unix_date);
        chai_1.assert.equal(sut.name, testItem.name);
        chai_1.assert.equal(sut.preference_location, testItem.preference_location);
        chai_1.assert.equal(sut.slave_map_changed, testItem.slave_map_changed);
        chai_1.assert.equal(sut.source, testItem.source);
        chai_1.assert.equal(sut.start_time, testItem.start_time);
        chai_1.assert.equal(sut.start_unix_time, testItem.start_unix_time);
        chai_1.assert.equal(sut.userId, testItem.userId);
        chai_1.assert.equal(sut.uuid, testItem.uuid);
        chai_1.assert.isTrue(sut.active);
        chai_1.assert.isTrue(sut.is_closed);
        const unit = _.first(sut.units.filter((x) => x.UnitID === "M12"));
        chai_1.assert.equal(unit === null || unit === void 0 ? void 0 : unit.Personnel.length, 2);
        const p1 = _.first(unit === null || unit === void 0 ? void 0 : unit.Personnel.filter((x) => x.PersonnelID === "X14"));
        chai_1.assert.equal(p1 === null || p1 === void 0 ? void 0 : p1.PersonnelName, "Mary Smith");
        chai_1.assert.equal(p1 === null || p1 === void 0 ? void 0 : p1.PersonnelNote, "X");
        chai_1.assert.equal(p1 === null || p1 === void 0 ? void 0 : p1.PersonnelRank, "Captain");
        chai_1.assert.equal(p1 === null || p1 === void 0 ? void 0 : p1.PersonnelWorkCode, "TRD");
        // Share incident properties
        chai_1.assert.isArray(sut.ReportNumber);
        chai_1.assert.equal(sut.ReportNumber.length, 2);
        const rna = _.first(sut.ReportNumber.filter((x) => x.name === "A"));
        chai_1.assert.isObject(rna);
        chai_1.assert.equal(rna === null || rna === void 0 ? void 0 : rna.number, "07-0351");
        const rnb = _.first(sut.ReportNumber.filter((x) => x.name === "B"));
        chai_1.assert.isObject(rnb);
        chai_1.assert.equal(rnb === null || rnb === void 0 ? void 0 : rnb.number, "UM-02210");
        chai_1.assert.isArray(sut.radioChannels);
        chai_1.assert.equal(sut.radioChannels.length, 2);
        const rca = _.first(sut.radioChannels.filter((x) => x.name === "CMD"));
        chai_1.assert.isObject(rca);
        chai_1.assert.equal(rca === null || rca === void 0 ? void 0 : rca.channel, "LOCAL Tone: 3");
        chai_1.assert.equal(rca === null || rca === void 0 ? void 0 : rca.url, "http://example.com/stream1");
        const rcb = _.first(sut.radioChannels.filter((x) => x.name === "TAC"));
        chai_1.assert.isObject(rcb);
        chai_1.assert.equal(rcb === null || rcb === void 0 ? void 0 : rcb.channel, "CDF TAC 10");
        chai_1.assert.equal(rcb === null || rcb === void 0 ? void 0 : rcb.url, "http://example.com/stream2");
        chai_1.assert.isObject(sut.record);
        chai_1.assert.equal(sut.record.name, "John");
        chai_1.assert.equal(sut.record.value, "Smith");
        chai_1.assert.isObject(sut.sharedSource);
        chai_1.assert.equal(sut.sharedSource.isExternal, true);
        chai_1.assert.equal(sut.sharedSource.name, "Demo RTS Fire Department");
        chai_1.assert.isArray(sut.sharedSource.reasons);
        chai_1.assert.equal(sut.sharedSource.reasons.length, 1);
        const ssr1 = _.first(sut.sharedSource.reasons);
        chai_1.assert.isObject(ssr1);
        chai_1.assert.equal(ssr1 === null || ssr1 === void 0 ? void 0 : ssr1.name, "Unit B10 assigned");
        chai_1.assert.equal(ssr1 === null || ssr1 === void 0 ? void 0 : ssr1.date.toISOString(), "2024-05-03T00:00:00.000Z");
        chai_1.assert.isArray(sut.sharedTo);
        chai_1.assert.equal(sut.sharedTo.length, 1);
        const st1 = _.first(sut.sharedTo);
        chai_1.assert.equal(st1 === null || st1 === void 0 ? void 0 : st1.active, true);
        chai_1.assert.equal(st1 === null || st1 === void 0 ? void 0 : st1.departmentId, "5195426cc4e016a988000965");
        chai_1.assert.equal(st1 === null || st1 === void 0 ? void 0 : st1.expireAt.toISOString(), "2024-08-01T10:20:30.400Z");
        chai_1.assert.equal(st1 === null || st1 === void 0 ? void 0 : st1.name, "Test Fire Department");
        chai_1.assert.equal(st1 === null || st1 === void 0 ? void 0 : st1.startAt.toISOString(), "2024-05-01T01:02:03.040Z");
        chai_1.assert.equal(st1 === null || st1 === void 0 ? void 0 : st1.reasons.length, 1);
        const str1 = _.first(st1 === null || st1 === void 0 ? void 0 : st1.reasons);
        chai_1.assert.equal(str1 === null || str1 === void 0 ? void 0 : str1.name, "Unit M10 assigned");
        chai_1.assert.equal(str1 === null || str1 === void 0 ? void 0 : str1.date.toISOString(), "2024-05-03T01:01:01.010Z");
    });
});
//# sourceMappingURL=managed-incident.js.map